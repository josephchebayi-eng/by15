import { NextResponse } from "next/server"
import OpenAI from "openai"
import { createClient } from "@supabase/supabase-js"

// Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
)

// ✅ Correctly fetch the OpenAI key from `secrets` table
async function getOpenAIKey(): Promise<string | null> {
  const { data, error } = await supabase
    .from("secrets") // ✅ CHANGED from "settings" to "secrets"
    .select("value")
    .eq("name", "openai")
    .single()

  if (error) {
    console.error("❌ Error fetching OpenAI key from Supabase:", error)
    return null
  }

  return data?.value || null
}

export async function POST(req: Request) {
  try {
    const { prompt, style, colors, industry } = await req.json()

    if (!prompt || !prompt.trim()) {
      return NextResponse.json({ success: false, error: "Prompt is required" }, { status: 400 })
    }

    const apiKey = await getOpenAIKey()
    if (!apiKey) {
      return NextResponse.json(
        {
          success: false,
          error: "OpenAI API key not found in Supabase.",
          needsConfiguration: true,
        },
        { status: 503 }
      )
    }

    const openai = new OpenAI({ apiKey })

    const fullPrompt = `
Design a modern, vibrant, colorful logo for a business in the ${industry || "creative"} industry.
Style: ${style || "artistic, bold"}
Colors: ${colors || "vivid and eye-catching"}
Business description: ${prompt}
The logo should be professional, scalable, and look great on websites, merchandise, and social media.
`

    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: fullPrompt,
      n: 1,
      size: "1024x1024",
      response_format: "url",
    })

    const imageUrl = response.data?.[0]?.url

    if (!imageUrl) {
      return NextResponse.json(
        { success: false, error: "No image was generated by OpenAI." },
        { status: 502 }
      )
    }

    return NextResponse.json({
      success: true,
      imageUrl,
      prompt: fullPrompt,
      provider: "openai",
      model: "dall-e-3",
      message: "Logo image generated using DALL·E 3",
    })
  } catch (error: any) {
    console.error("❌ Logo generation error:", error)
    return NextResponse.json(
      {
        success: false,
        error: error?.message || "Image generation failed.",
      },
      { status: 500 }
    )
  }
}
