import { NextResponse } from "next/server"
import OpenAI from "openai"
import { createClient } from "@supabase/supabase-js"

// Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
)

// ‚úÖ Debug version to see exactly what's in the table
async function getOpenAIKey(): Promise<string | null> {
  console.log("üîç Starting getOpenAIKey function...")
  console.log("üìç Environment variables:")
  console.log("  SUPABASE_URL exists:", !!process.env.SUPABASE_URL)
  console.log("  SUPABASE_ANON_KEY exists:", !!process.env.SUPABASE_ANON_KEY)
  console.log("  SUPABASE_URL value:", process.env.SUPABASE_URL)
  
  try {
    // First, let's see ALL rows in the secrets table
    console.log("üîç Querying ALL rows from secrets table...")
    const { data: allSecrets, error: allError } = await supabase
      .from("secrets")
      .select("*")
    
    console.log("üìã ALL secrets in table:")
    console.log("  Data:", JSON.stringify(allSecrets, null, 2))
    console.log("  Error:", allError)
    console.log("  Row count:", allSecrets?.length || 0)

    if (allSecrets && allSecrets.length > 0) {
      console.log("üîç Individual rows:")
      allSecrets.forEach((row, index) => {
        console.log(`  Row ${index + 1}:`)
        console.log(`    name: "${row.name}" (type: ${typeof row.name})`)
        console.log(`    value exists: ${!!row.value}`)
        console.log(`    value length: ${row.value?.length || 0}`)
      })
    }

    // Now try different variations of the query
    console.log("üîç Trying query with 'openai_api_key'...")
    const { data: data1, error: error1 } = await supabase
      .from("secrets")
      .select("value")
      .eq("name", "openai_api_key")
      .single()

    console.log("üìä Result for 'openai_api_key':", { data: data1, error: error1 })

    if (data1?.value) {
      console.log("‚úÖ Found key with 'openai_api_key'")
      return data1.value
    }

    // Try 'openai' as fallback
    console.log("üîç Trying query with 'openai'...")
    const { data: data2, error: error2 } = await supabase
      .from("secrets")
      .select("value")
      .eq("name", "openai")
      .single()

    console.log("üìä Result for 'openai':", { data: data2, error: error2 })

    if (data2?.value) {
      console.log("‚úÖ Found key with 'openai'")
      return data2.value
    }

    console.log("‚ùå No key found with either name")
    return null

  } catch (err) {
    console.error("‚ùå Catch block error:", err)
    return null
  }
}

// ‚úÖ Properly typed request interface
interface LogoRequest {
  prompt: string
  style?: string
  colors?: string
  industry?: string
}

export async function POST(req: Request) {
  try {
    const { prompt, style, colors, industry }: LogoRequest = await req.json()

    if (!prompt || !prompt.trim()) {
      return NextResponse.json(
        { success: false, error: "Prompt is required" }, 
        { status: 400 }
      )
    }

    const apiKey = await getOpenAIKey()
    if (!apiKey) {
      return NextResponse.json(
        {
          success: false,
          error: "OpenAI API key not found in Supabase.",
          needsConfiguration: true,
        },
        { status: 503 }
      )
    }

    const openai = new OpenAI({ apiKey })

    const fullPrompt = `
Design a modern, vibrant, colorful logo for a business in the ${industry || "creative"} industry.
Style: ${style || "artistic, bold"}
Colors: ${colors || "vivid and eye-catching"}
Business description: ${prompt}
The logo should be professional, scalable, and look great on websites, merchandise, and social media.
`

    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: fullPrompt,
      n: 1,
      size: "1024x1024",
      response_format: "url",
    })

    const imageUrl = response.data?.[0]?.url

    if (!imageUrl) {
      return NextResponse.json(
        { success: false, error: "No image was generated by OpenAI." },
        { status: 502 }
      )
    }

    return NextResponse.json({
      success: true,
      imageUrl,
      prompt: fullPrompt,
      provider: "openai",
      model: "dall-e-3",
      message: "Logo image generated using DALL¬∑E 3",
    })
  } catch (error: any) {
    console.error("‚ùå Logo generation error:", error)
    return NextResponse.json(
      {
        success: false,
        error: error?.message || "Image generation failed.",
      },
      { status: 500 }
    )
  }
}